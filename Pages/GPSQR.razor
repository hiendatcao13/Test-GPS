@page "/gps"

@using GPS.Pages.Dialog
@inject ISnackbar Snackbar
@inject IDialogService Dialog

<h1>Welcome to GPS</h1>
<br>

<h5>We need your location through GPS system. Please click "Agree" button below to allow the permission.</h5>
@* <button class="location-btn" onclick="getLocation()">üìç L·∫•y v·ªã tr√≠ hi·ªán t·∫°i</button> *@
<MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="OnClickRequestAsync">üìç Get current location</MudButton>

@code {
    [Inject]
    private IJSRuntime Js { get; set; } = default!;

    string userOS = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        userOS = await DetectDevice();
        await base.OnInitializedAsync();
    }

    private async Task GetCurrentLocationAsync()
    {
        await Js.InvokeVoidAsync("getLocation");
    }

    private async Task OnClickRequestAsync()
    {
        var result = await OpenRequestDialogAsync();
        if (result != null && !result.Canceled)
        {
            await GetCurrentLocationAsync();
        }
    }

    private async Task OnClickGuidAsync()
    {
        switch (userOS)
        {
            case "iOS":
                var iosResult = await OpenIOSGuidDialogAsync();
                if (iosResult != null && !iosResult.Canceled)
                {
                    await GetCurrentLocationAsync();
                }
                break;
            case "Android":
                var androidResult = await OpenAndroidGuidDialogAsync();
                if (androidResult != null && !androidResult.Canceled)
                {
                    await GetCurrentLocationAsync();
                }
                break;
            case "Windows":
            case "Linux":
            case "MacOS":
                await GetCurrentLocationAsync();
                break;
            default:
                Snackbar.Add("Unsupported OS", Severity.Error);
                break;
        }
    }

    private async Task<string> DetectDevice()
    {
        return await Js.InvokeAsync<string>("getUserOS");
    }

    private async Task<DialogResult?> OpenRequestDialogAsync()
    {
        var parameters = new DialogParameters<RequestGPS> { };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, BackgroundClass = "my-custom-class" };
        var dialog = await Dialog.ShowAsync<RequestGPS>("REQUEST LOCATION", parameters, options);
        return await dialog.Result;
    }

    private async Task<DialogResult?> OpenIOSGuidDialogAsync()
    {
        var parameters = new DialogParameters<IOSGuid> { };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, BackgroundClass = "my-custom-class" };
        var dialog = await Dialog.ShowAsync<IOSGuid>("iOS GUID", parameters, options);
        return await dialog.Result;
    }

    private async Task<DialogResult?> OpenAndroidGuidDialogAsync()
    {
        var parameters = new DialogParameters<AndroidGuid> { };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, BackgroundClass = "my-custom-class" };
        var dialog = await Dialog.ShowAsync<AndroidGuid>("iOS GUID", parameters, options);
        return await dialog.Result;
    }
}